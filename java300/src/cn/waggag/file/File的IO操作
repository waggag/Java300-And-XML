一.读取文件 
	1.建立联系  File对象
	2.选择流  文件输入流  InputStream  FileInputStream
	3.操作	读取文件的大小
	4.释放资源
二.写出文件
	1.建立联系  File对象
	2.选择流  文件输入流  OutputStream  FileOutputStream
	3.操作	写出文件的大小  write()  + flush();
	4.释放资源
三.文件的拷贝
	程序为桥梁，借助读取文件和写出文件来实现
	
四.文件夹的拷贝
	1.递归查找子孙级文件|文件夹
	2.  文件 复制（IO流复制）
		文件夹 创建
		
字节流： 可以处理一切文件

节点流 ：只能处理纯文本
		 Reader FileReader
		 Writer FileWriter
一，纯文本读取
	1.建立联系
	2.选择流
	3.读取  char[]
	4.关闭
二，纯文本写出
	1.建立联系
	2.选择流
	3.写出  write()
	4.关闭
	
	
处理流： 增强功能,提高性能 ，在节点流之上
	缓冲流
	一.字节缓冲流
		BufferedinputStream
		BufferedoutputStream
	二.字符缓冲流
		BufferedReader  readLine()
		BufferedWriter  newLine()


转换流： 字节流转换为字符流 处理乱码集
	1.编码和解码
	编码：   字符(char)--> 编码字符集 -->  二进制(byte)
	解码：二进制(byte)--> 解码字符集 -->  字符(char)
	2.乱码的原因
		1.编码与解码的不同意
		2.字节数长度都不够
	3.文件乱码


==================================
一.节点流
 	1.字节数组
 		输入流: DataArrayInputStream

 		输出流: DataArrayOutputStream


二.处理流
	1.处理基本数据类+String  保留数据和类型
		输入流:DataInputStream  readXXX()
		输出流:DataOutputStream  writeXXX()
	2.引用类型 保留数据+类型
		反序列化： 输入流  ObjectInputStream
		序列化 ： 输出流	ObjectOutputStream
		
	1.注意反序列化必须和序列化顺序一致
	2.不是所有的对象都可以序列化  java.io.Serialable
	  不是所有的属性都需要序列化  transient


	关闭的方法
	编写工具，实现关闭流









	
	